use_nvm() {
  watch_file .nvmrc
  local NVM_PATH="$HOME/.nvm/nvm.sh"
  if ! [ -f "$NVM_PATH" ]; then
    echo "Installing NVM" >&2
    curl -o- https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
  fi
  . "${NVM_PATH}"
  nvm install
  layout node
}

use_python() {
    if [ -n "$(which pyenv)" ]; then
        local pyversion=$1
        pyenv local ${pyversion}
    fi
}

layout_virtualenv() {
    local pyversion=$1
    local pvenv=$2
    if [ -n "$(which pyenv virtualenv)" ]; then
        pyenv virtualenv --force --quiet ${pyversion} ${pvenv}-${pyversion}
    fi
    pyenv local --unset
}

layout_activate() {
    if [ -n "$(which pyenv)" ]; then
        source $(pyenv root)/versions/$1/bin/activate
    fi
}

layout_poetry() {
  if [[ ! -f pyproject.toml ]]; then
    log_error 'No pyproject.toml found. Use `poetry new` or `poetry init` to create one first.'
    exit 2
  fi

  # create venv if it doesn't exist
  poetry run true

  export VIRTUAL_ENV=$(poetry env info --path)
  export POETRY_ACTIVE=1
  PATH_add "${VIRTUAL_ENV}/bin"
}
